package retro

import "github.com/kralamoure/retro/retrotyp"

var MountTemplateIdByMountCertificateId = map[int]int{
	7808: 3,
	7810: 9,
	7811: 10,
	7812: 11,
	7813: 12,
	7814: 15,
	7815: 16,
	7816: 17,
	7817: 18,
	7818: 19,
	7819: 20,
	7820: 21,
	7821: 22,
	7822: 23,
	7823: 33,
	7824: 34,
	7825: 35,
	7826: 36,
	7827: 37,
	7828: 38,
	7829: 39,
	7830: 40,
	7831: 41,
	7832: 42,
	7833: 43,
	7834: 44,
	7835: 45,
	7836: 46,
	7837: 47,
	7838: 48,
	7839: 49,
	7840: 50,
	7841: 51,
	7842: 52,
	7843: 53,
	7844: 54,
	7845: 55,
	7846: 56,
	7847: 57,
	7848: 58,
	7849: 59,
	7850: 60,
	7851: 61,
	7852: 62,
	7853: 63,
	7854: 64,
	7855: 65,
	7856: 66,
	7857: 67,
	7858: 68,
	7859: 69,
	7860: 70,
	7861: 71,
	7862: 72,
	7863: 73,
	7865: 75,
	7866: 76,
	7867: 77,
	7868: 78,
	7869: 79,
	7870: 80,
	7871: 82,
	7872: 83,
	7873: 84,
	7874: 85,
	7875: 86,
	7876: 87,
	9582: 88,
}

var MountCertificateIdByMountTemplateId = map[int]int{
	3:  7808,
	9:  7810,
	10: 7811,
	11: 7812,
	12: 7813,
	15: 7814,
	16: 7815,
	17: 7816,
	18: 7817,
	19: 7818,
	20: 7819,
	21: 7820,
	22: 7821,
	23: 7822,
	33: 7823,
	34: 7824,
	35: 7825,
	36: 7826,
	37: 7827,
	38: 7828,
	39: 7829,
	40: 7830,
	41: 7831,
	42: 7832,
	43: 7833,
	44: 7834,
	45: 7835,
	46: 7836,
	47: 7837,
	48: 7838,
	49: 7839,
	50: 7840,
	51: 7841,
	52: 7842,
	53: 7843,
	54: 7844,
	55: 7845,
	56: 7846,
	57: 7847,
	58: 7848,
	59: 7849,
	60: 7850,
	61: 7851,
	62: 7852,
	63: 7853,
	64: 7854,
	65: 7855,
	66: 7856,
	67: 7857,
	68: 7858,
	69: 7859,
	70: 7860,
	71: 7861,
	72: 7862,
	73: 7863,
	75: 7865,
	76: 7866,
	77: 7867,
	78: 7868,
	79: 7869,
	80: 7870,
	82: 7871,
	83: 7872,
	84: 7873,
	85: 7874,
	86: 7875,
	87: 7876,
	88: 9582,
}

type MountTemplate struct {
	Id         int
	Name       string
	GFXId      int
	Color1     retrotyp.Color
	Color2     retrotyp.Color
	Color3     retrotyp.Color
	MaxEffects []retrotyp.Effect
}

func (t MountTemplate) Effects(level int) []retrotyp.Effect {
	var effects []retrotyp.Effect

	for _, effect := range t.MaxEffects {
		effect.DiceNum = effect.DiceNum * level / 100
		if effect.DiceNum > 0 {
			effects = append(effects, effect)
		}
	}

	return effects
}
